// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TodoListContainer Component render snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TodoListContainer
    currentLabel="TODOS"
    dispatch={[MockFunction]}
    todoList={
      Array [
        Object {
          "id": 1,
          "isCompleted": true,
          "label": "TODOS",
          "text": "Learn React",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Box
        type="large"
      >
        <div
          className="todoList__header"
        >
          <Label
            text="Todo Items:   TODOS"
          />
          <Label
            className="todolist__count"
            text="0/1"
          />
        </div>
        <TodoListItem
          currentLabel="TODOS"
          dispatch={[MockFunction]}
          todo={
            Object {
              "id": 1,
              "isCompleted": true,
              "label": "TODOS",
              "text": "Learn React",
            }
          }
        />
      </Box>,
      "condition": true,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <div
            className="todoList__header"
          >
            <Label
              text="Todo Items:   TODOS"
            />
            <Label
              className="todolist__count"
              text="0/1"
            />
          </div>,
          Array [
            <TodoListItem
              currentLabel="TODOS"
              dispatch={[MockFunction]}
              todo={
                Object {
                  "id": 1,
                  "isCompleted": true,
                  "label": "TODOS",
                  "text": "Learn React",
                }
              }
            />,
          ],
        ],
        "type": "large",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Label
                text="Todo Items:   TODOS"
              />,
              <Label
                className="todolist__count"
                text="0/1"
              />,
            ],
            "className": "todoList__header",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "text": "Todo Items:   TODOS",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "todolist__count",
                "text": "0/1",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "class",
          "props": Object {
            "currentLabel": "TODOS",
            "dispatch": [MockFunction],
            "todo": Object {
              "id": 1,
              "isCompleted": true,
              "label": "TODOS",
              "text": "Learn React",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Box
          type="large"
        >
          <div
            className="todoList__header"
          >
            <Label
              text="Todo Items:   TODOS"
            />
            <Label
              className="todolist__count"
              text="0/1"
            />
          </div>
          <TodoListItem
            currentLabel="TODOS"
            dispatch={[MockFunction]}
            todo={
              Object {
                "id": 1,
                "isCompleted": true,
                "label": "TODOS",
                "text": "Learn React",
              }
            }
          />
        </Box>,
        "condition": true,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <div
              className="todoList__header"
            >
              <Label
                text="Todo Items:   TODOS"
              />
              <Label
                className="todolist__count"
                text="0/1"
              />
            </div>,
            Array [
              <TodoListItem
                currentLabel="TODOS"
                dispatch={[MockFunction]}
                todo={
                  Object {
                    "id": 1,
                    "isCompleted": true,
                    "label": "TODOS",
                    "text": "Learn React",
                  }
                }
              />,
            ],
          ],
          "type": "large",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Label
                  text="Todo Items:   TODOS"
                />,
                <Label
                  className="todolist__count"
                  text="0/1"
                />,
              ],
              "className": "todoList__header",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "text": "Todo Items:   TODOS",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "todolist__count",
                  "text": "0/1",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "class",
            "props": Object {
              "currentLabel": "TODOS",
              "dispatch": [MockFunction],
              "todo": Object {
                "id": 1,
                "isCompleted": true,
                "label": "TODOS",
                "text": "Learn React",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
